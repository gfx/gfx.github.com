digraph {
graph [overlap=false]
subgraph cluster_Mouse_Meta_Class {
	label="Mouse::Meta::Class";
	"Mouse::Meta::Class::superclasses";
	"Mouse::Meta::Class::add_attribute";
}
subgraph cluster_Mouse_Util_TypeConstraints {
	label="Mouse::Util::TypeConstraints";
	"Mouse::Util::TypeConstraints::class_type";
	"Mouse::Util::TypeConstraints::find_type_constraint";
}
subgraph cluster_Mouse_Exporter {
	label="Mouse::Exporter";
	"Mouse::Exporter::setup_import_methods";
	"Mouse::Exporter::import";
	"Mouse::Exporter::do_import";
}
subgraph cluster_Mouse_Meta_Module {
	label="Mouse::Meta::Module";
	"Mouse::Meta::Module::initialize";
	"Mouse::Meta::Module::add_method";
}
subgraph cluster_Mouse_Meta_TypeConstraint {
	label="Mouse::Meta::TypeConstraint";
	"Mouse::Meta::TypeConstraint::new";
}
subgraph cluster_main {
	label="main";
	"main::BEGIN";
}
subgraph cluster_Mouse {
	label="Mouse";
	"Mouse::BEGIN";
	"Mouse::has";
	"Mouse::init_meta";
}
subgraph cluster_Mouse_Util {
	label="Mouse::Util";
	"Mouse::Util::__register_metaclass_storage";
	"Mouse::Util::generate_can_predicate_for";
}
subgraph cluster_Plack_Handler_CLI {
	label="Plack::Handler::CLI";
	"Plack::Handler::CLI::meta";
}
"Mouse::has" -> "Mouse::Meta::Class::add_attribute";
"main::BEGIN" -> "Mouse::has";
"main::BEGIN" -> "Plack::Handler::CLI::meta";
"Mouse::init_meta" -> "Mouse::Meta::Module::add_method";
"Mouse::Exporter::do_import" -> "Mouse::init_meta";
"Mouse::BEGIN" -> "Mouse::Util::generate_can_predicate_for";
"Plack::Handler::CLI::meta" -> "Mouse::Meta::Module::initialize";
"Mouse::has" -> "Mouse::Meta::Module::initialize";
"Mouse::init_meta" -> "Mouse::Meta::Module::initialize";
"Mouse::BEGIN" -> "Mouse::Meta::TypeConstraint::new";
"Mouse::BEGIN" -> "Mouse::Exporter::setup_import_methods";
"Mouse::BEGIN" -> "Mouse::Util::__register_metaclass_storage";
"Mouse::init_meta" -> "Mouse::Meta::Class::superclasses";
"Mouse::init_meta" -> "Mouse::Util::TypeConstraints::class_type";
"Mouse::init_meta" -> "Mouse::Util::TypeConstraints::find_type_constraint";
"Mouse::BEGIN" -> "Mouse::Exporter::import";
}
